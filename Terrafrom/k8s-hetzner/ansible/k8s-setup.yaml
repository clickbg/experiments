---
- hosts: all
  gather_facts: no
  become: yes

  tasks:

    - name: Wait 300 seconds for port 22 to become open and contain "OpenSSH"
      wait_for:
        port: 22
        host: '{{ (ansible_ssh_host|default(ansible_host))|default(inventory_hostname) }}'
        search_regex: OpenSSH
        delay: 60
      connection: local
    
    - name: Gather facts manually
      ansible.builtin.setup:

    - name: Check mandatory variables imported from Terraform
      assert:
        that:
          - k8s_version is defined
        fail_msg: "Something went wrong, Terraform variables not exported to Ansible"

    - name: Perform OS upgrade
      ansible.builtin.apt:
        autoclean: yes
        autoremove: yes
        upgrade: dist
        update_cache: yes
        cache_valid_time: 3600
        dpkg_options: 'force-confold,force-confdef'

    - name: Install Core Packages
      ansible.builtin.apt:
        update_cache: yes
        install_recommends: no
        state: latest
        pkg:
        - bash
        - curl
        - gnupg2
        - rsync
        - software-properties-common
        - iotop
        - apt-transport-https
        - ca-certificates
        - ebtables
        - ethtool

    - name: Load required kernel modules for k8s
      copy:
        dest: "/etc/modules-load.d/k8s.conf"
        content: |
          overlay
          br_netfilter

    - name: Load required system tunables for k8s
      copy:
        dest: "/etc/sysctl.d/k8s.conf"
        content: |
          net.bridge.bridge-nf-call-iptables = 1
          net.bridge.bridge-nf-call-ip6tables = 1
          net.ipv4.ip_forward = 1

    - name: Add Kubernetes and Docker repos and install Kubernetes, Containerd and Cilium
      block:
        - name: Create /etc/apt/keyrings
          file:
            path: /etc/apt/keyrings
            state: directory
            mode: '0755'

        - name: Get Kubernetes package key
          shell: | 
            curl -fsSL https://pkgs.k8s.io/core:/stable:/{{ k8s_version }}/deb/Release.key | gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
            chmod 644 /etc/apt/keyrings/kubernetes-apt-keyring.gpg
          args:
            creates: /etc/apt/keyrings/kubernetes-apt-keyring.gpg

        - name: Get Docker package key
          shell: | 
            curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
            chmod 644 /etc/apt/keyrings/docker.asc
          args:
            creates: /etc/apt/keyrings/docker.asc

        - name: Add Kubernetes packages repo
          ansible.builtin.apt_repository:
            repo: "deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/{{ k8s_version }}/deb/ /"
            state: present

        - name: Add Docker packages repo
          ansible.builtin.apt_repository:
            repo: "deb [arch=amd64 signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable"
            state: present

        - name: Install Core Packages
          ansible.builtin.apt:
            update_cache: yes
            install_recommends: no
            state: latest
            pkg:
            - kubelet 
            - kubeadm 
            - kubectl 
            - containerd.io

        - name: Hold Kubernetes packages to prevent update issue
          shell: apt-mark hold kubelet kubeadm kubectl containerd.io

        - name: Configure Containerd
          shell: |
            cp -p /etc/containerd/config.toml /etc/containerd/config.toml.bkp
            containerd config default > /etc/containerd/config.toml
            sed -i 's/SystemdCgroup = false/SystemdCgroup = true/g' /etc/containerd/config.toml
            systemctl enable containerd
          args:
            creates: /etc/containerd/config.toml.bkp

        - name: Install Cilium
          shell: | 
            curl -fsSL https://github.com/cilium/cilium-cli/releases/latest/download/cilium-linux-amd64.tar.gz -o /tmp/cilium-linux-amd64.tar.gz
            tar xzvfC /tmp/cilium-linux-amd64.tar.gz /usr/local/bin
            rm -f /tmp/cilium-linux-amd64.tar.gz
          args:
            creates: /usr/local/bin/cilium


    - name: Check if a reboot is required.
      ansible.builtin.stat:
        path: /var/run/reboot-required
        get_checksum: no
      register: reboot_required_file

    - name: Reboot the server (if required).
      ansible.builtin.reboot:
      when: reboot_required_file.stat.exists == true

    - name: Remove dependencies that are no longer required.
      ansible.builtin.apt:
        autoremove: yes

